Ecmascript 6: Ecmascript is an organization to bring changes/updates/new features to scripting lanaguages
In 2015, ES6 is released. current ES version is 15
ES6 brought a lot of new features to js so that js became more simple
  They are:
  i. var to const/let
  ii. strings to template literals
  iii. functions with default parametrs,arrow functions
  iv. mutiple returns in a functions
  v. rest and spread operator
  vi. constructor function to constructors
  vii. OOPS
  viii. commonJS to ES6 module system
  ix. array and object destructuring
  x. new datatypes like regexp,map,set,symbols


  i. var to let/const:
  Before ES6, we used var to declare a variable. But ES6 introduced let and const
  var can redeclare,reassign,hoisting. var is a function scoped variable
  let and const cannot do redeclare and Hoisting
  let can reassign and const cannot
  let and const are block scoped variable

  ii. strings to template literals:
  Before ES6, we used strings as static/constant values
  But to write multi line strings / dynamics strings, ES6 introduced template literals

  we embrace dynamic values within ${} and whole string in backticks. Combining dynamic value into string is also called string interpolation

  iii. Default parameters and arrow functions:
  ES6 brings functions with default values to undefined parameters
   function fun(a,b=5){
    console.log(a+b)
   }
  fun(5);fun(5,10);
  if b value is given it will accept else it will assign b value as 5.
  Before Es6, we consider functions as variables by function expressions
  var x= function(){
    console.log("value")
  }
  but Es6 brought simple,modern way
  const x= ()=>console.log("value")
  ** arrow functions will not have "this" , normal functions,function expressions does.
  
iv. multiple returns in a function:
function cannot return multiple values but Es6 gave a solution by returning multiple values in the form of Array or object.

v. Rest and Spread operators:
Rest and spread, both are denoted by three dots(...)
They are used for different purposes
Rest is used to take rest of the elements as a array, 
Spread is used to split the elements of the array.
Rest operator should be always last.
function sum2 (a, ...b)
{
    console.log(a, b)
    const c = ["x", "y", ...b] //["x","y",6,7,8,9]
    console.log(c)
}
sum2(5, 6, 7, 8, 9)


vi. Array and object destructuring:
destructuring is used to get the values out of the array/object in a simple manner
//Array destructure

let arr2 = ["vani", "rani", "mani", "phani"];
// let x1 = arr[0];
// let x2 = arr[1];
// let x3 = arr[2];
// let x4 = arr[3]
let [x1, ...x2] = arr2;
console.log(x1, x2);



let arr3 = [5, 4, 3];
let [y1, ...y2] = arr3;
console.log(y1, y2)

//object destructuring
let obj = {
    name: "PRASAD",
    job:"Full stack developer"
}
console.log(obj.job)
let { name,job } = obj;
console.log(job)



// Object oriented Programming
// Till 2015, JS implements functional Programming
// ES6 brings classes and OOPs to JS
object: an object is a real world entity which contains attributes and methods
eg: specific fan --- color,shape,no-of-wings
    run(),stop()
    let obj={
      color:"red",
      shape:"round",
      no-of-wings:3
    }
class : A blueprint of object.
Eg: fan

Examples:
class: fruits -- color, taste
object: orange -- orange,sweet
object: banana - yellow,sweetsour

** class is a collection/factory of objects. object is an instance of class

-- In Js, classes are actually functions
syntax:
class classname{

}

class contains data and methods which belongs to objects so that
variable declarations such as let,var,const or function declarations such as function keyword are not allowed


constructors: Before Es6, we used to have constructor functions which got changed to direct constructors in ES6
A constructor is a function which is used to initialise initial value to class data members. constructors are called by default at object creation

There are two types of constructors i.e., default and paramterized
Default constructors will not pass any parameters
paramterized constructors will pass parameters
Eg:
class Car{
  color;brand;
  constructor(c,b){
    this.color=c;
    this.brand=b;
  }
}
let obj= new Car("red","Maruti")
// this is a current calling object
console.log(obj.color) //red

JS classes also supports inheritance. inheritance means aquaring properties an methods from parent class to child class. 
JS supports multi level and Heirarcal inheritance

class employee
{
    eid; ename; esalary;
    constructor(i, n, s)
    {
        this.eid = i; this.ename = n; this.esalary = s;
    }
    display ()
    {
        console.log(`Ename:${this.ename} , Eid:${this.eid}, Esalary:${this.esalary}`)
    }
}
class Manager extends employee {
	teamid
    constructor(tid, i, n, s)
    {
        this.teamid=tid
		super(i,n,s)
	}
}
let obj4 = new employee(45, "Raj", 25000);
let obj5 = new employee(65, "Ragini", 15000);
let obj6 = new Manager(4152, 65, "jaya", 15000)
obj6.display()


viii. ES6 Module System:
Module systems are used to export/import data or functionalities from one js file to another js file. we have several module systems such as commonJS,requireJS etc..,
WE changed to ES6 module system from commonJS in 2015(ES6)

we can import / export using "import","export" keywords
we can do
  i. default imports and exports
  export default valuename;
  import valuename from 'filepath'
  ii. named imports and exports
  export {value1,value2,value3}
  import {value1,value2} from 'filepath'












































