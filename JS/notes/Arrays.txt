Arrays:
=======
Array is collection of elements. Arrays stores elements with index values. Index values starts from zero. Arrays are embraced by square brackets
let a=["raj",5,true]
let arr=[5,3,7,6]  // arr.length ==4
console.log(arr[0]+arr[1])//5+3=8
arr[11111]=5
console.log(arr.length) //11112
console.log(arr[-12]) //undefined
Array Methods:
1. length: it returns number of elements in an array from zero index
2. push(values): push is used to enter/insert values into an array at end position. push returns length of new Array
you can insert as many values at a time at end using push
let a=[5,3]
a.push(4,6)  // it returns 4
a values will be changed as [5,3.4,6]

--> Arrays are mutable in JS
Mutability is the ability to change the values when methods are applied to it 
for every method, arrays may change original values
--> Arrays compares the references,not values

3. pop(): Pop is used to remove the last value from an array
pop will return deleted value and array will be updated

4. unshift(values): unshift is used to add multiple values
at the starting position of the array. it returns length of new array
 arr.unshift(values)

5. shift(): shift() is used to remove the first element 
in the array. it returns the removed element
arr.shift()

6.splice(starting_index,deleteCount,values to insert):
splice is used to insert/delete based on index value in an array
for zero elements to delete, you can use 0.

task1: let friens=["sheldon","joey","monica","ross","rachel","stuward"];
1. remove sheldon and add phoebe // shift("sheldon") and unshift("phoebe")
2. remove stuward and add chandler // pop("stuward") and push("chandler")
3. between ross and rachel , add empty string // splice(4,0,"")

7. indexOf('element'): it returns the index of  first occurence of given element
let arr=[5,6,8,9,10,5,6]
arr.indexOf(5) //0

8. lastIndexOf('element'): it returns the index of last occurence of given element
let arr=[5,6,8,9,10,5,6]
arr.lastIndexOf(5) //5

9. reverse(): reverse method in an array will reverse all elements
let arr=[1,2,3,4]
arr.reverse()//[4,3,2,1]

10.sort(): sort method in arrays will sort sort values lexigraphically(alphabetically)
let arr= [5,4,8,3];
arr.sort() //[3,4,5,8]
let arr2=[1,2,12,142,15,25]
arr.sort()//[1,12,142,15,2,25]
let arr=[4,24,11,44];
//ascending order:
arr.sort(function(a,b){
    return a-b;
})

sort function follows below procedure if function is given
1.compare neighours and return result
2. if result is positive(a>b),
swap neighbours
3. if result is regitive(a<b),
go for next neighbours

//includes -- it checks whether array contains the element or not
arr = [5, 4, 3, 2, 1];
console.log(arr.includes(25)) //false
//concat
console.log(arr.concat([2, 3, 4, 5]))
// it won't modify original array
// iterators
forEach - used to iterate the complete array
  forEach uses callback function and passes each and every value of array to the callback function, at each iteration

  syntax:
  arr.forEach(callback(ele,index))
  
  1. forEach()
Description: The forEach() method iterates over each element in an array and executes a provided function once for each array element. It does not return a new array; it simply applies the function to each element.

Example:
const arr = [1, 2, 3];
arr.forEach(num => {
  console.log(num * 2); // Outputs: 2, 4, 6
});

2. map()
Description: The map() method creates a new array by applying a provided function to each element in the original array. Unlike forEach(), it returns a new array with transformed elements.

Example:
const arr = [1, 2, 3];
const doubled = arr.map(num => num * 2);
console.log(doubled); // Outputs: [2, 4, 6]

3. filter()
Description: The filter() method creates a new array containing elements that pass a condition defined by the provided function (i.e., elements for which the function returns true).

Example:
const arr = [1, 2, 3, 4, 5];
const evenNumbers = arr.filter(num => num % 2 === 0);
console.log(evenNumbers); // Outputs: [2, 4]

4. some()
Description: The some() method checks if at least one element in the array passes the condition specified in the provided function. It returns true if any element satisfies the condition, otherwise false.

Example:
const arr = [1, 2, 3, 4, 5];
const hasEven = arr.some(num => num % 2 === 0);
console.log(hasEven); // Outputs: true (since 2 and 4 are even)

5. every()
Description: The every() method checks if all elements in the array pass the condition defined by the provided function. It returns true if all elements satisfy the condition, otherwise false.

Example:
const arr = [2, 4, 6];
const allEven = arr.every(num => num % 2 === 0);
console.log(allEven); // Outputs: true (since all elements are even)





































































